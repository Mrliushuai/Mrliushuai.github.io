{"meta":{"title":"ls's blog","subtitle":"","description":"","author":"ls","url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"un55fin55","updated":"un55fin55","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"关于","date":"un55fin55","updated":"un55fin55","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"un55fin55","updated":"un55fin55","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"un55fin55","updated":"un55fin55","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"un55fin55","updated":"un55fin55","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"un55fin55","updated":"un55fin55","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"un55fin55","updated":"un55fin55","comments":false,"path":"home/index.html","permalink":"http://example.com/home/index.html","excerpt":"","text":""},{"title":"友情链接","date":"un55fin55","updated":"un55fin55","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"小程序容器","slug":"appletContainer","date":"un55fin55","updated":"un55fin55","comments":true,"path":"2022/07/22/appletContainer/","link":"","permalink":"http://example.com/2022/07/22/appletContainer/","excerpt":"","text":"一、小程序容器架构图 二、小程序权限管理 小程序通过JSApi 调用相应权限的时候，权限优先级 开放平台 &gt; 小程序容器 &gt; 设备。 小程序容器向开放平台获取与小程序相关的基本信息以及权限信息，商户在创建小程序的时候申请通过开方平台审核并授予的权限，小程序容器作为开放平台对小程序授权的挡板，小程序如没有申请对应权限或者开放平台没有通过授权请求，则容器直接不处理。如果对应权限已被开放平台授权，则参照对应权限管理列表做相应的处理。 例1：调用手机摄像头： 如果商户在开放平台创建小程序的时候未申请该权限，则小程序容器对于此jsapi的调用做挡回处理。 如果商户在开放平台创建小程序的时候申请了该权限并通过审核，则小程序容器直接调用系统的相机实现该功能，如果相机在银行app的使用过程中没有使用过相机，则系统会征询用户是否允许银行app是否调用。* 例2：调用获取用户信息jsapi场景： 如果商户在开放平台创建小程序的时候未申请该权限，则小程序容器对于此jsapi的调用做挡回处理。 如果商户在开放平台创建小程序的时候申请了该权限并通过审核，则通过提供给银行app的标准方法获得该业务能力，并拿到结果。与相机场景区别在于，此权需要通过小程序容器的征询弹框来获得用户的允许，同时具备时效性，首次征询后的一定时间范围内，不需要征询。* 三、小程序管理 - appletsContainerQueue（Applet list）: 缓存已唤起小程序容器的列队，当再次唤起时，会去appletsContainerQueue遍历是否已缓存，如果有会直接拉起，如果没有那么走第一次唤起流程。 - Resource management（资源管理）：加载之前Manager判断本地是否存在小程序相关的资源，如果没有则下载zip资源包并解压并保存到本地，同时加载小程序远程url。如果在本地已经存在对应资源，判断版本号是否一致，如果一致则直接加载本地资源，如果不一致则下载新资源并更新到本地。 - AppletLogManager（日志管理者）：小程序日志管理者负责对各容器的交互使用，生命周期节点进行日志收集和上传。 - AppletStatisticalManager（统计管理）：通过埋点，统计小程序生命周期中的各数据。 四、JS交互管理 - AppletsJsApi：通过注入的形式将AppletJsApi給封装好的WebView。 12AppletsJsApi *js_api = [[AppletsJsApi alloc] init];[self.webview addJavascriptObject:js_api namespace:nil]; 在AppletsJsApi中可以管理与小程序交互的JSApi，例如跳转到系统的设置页面。 123456- (void)toSystemSetting:(NSString *)msg &#123; if ([msg isKindOfClass:[NSNull class]] || !msg) &#123; msg = @&quot;default vallue !&quot;; &#125; [self.csiiNativeTool toSystemSetting];&#125; AppletsNativeTools：管理手机本地功能，例如跳转系统设置。 12/// 跳转系统设置- (void)toSystemSetting; Container调用Applet方法 1234// Native实现[self.webview callHandler:@&quot;WillAppear&quot; completionHandler:^(NSNumber * _Nullable value) &#123; CSIILog(@&quot;call js func: %@&quot;,@“ WillAppear”);&#125;]; 1234// JS实现bridge.register(&#x27;WillAppear&#x27;, function(v)&#123; return &#x27;WillAppear&#x27;;&#125;) 五、客户端管理 通信 AppletsModuleProcotol： container与Client之间的协议。定义并提供由Client实现的代理方法，通过传入Msg和CallBack将Client和Container建立起通信闭环。 - 数据管理 AppletsDataManager： Applet与Client数据流转中转站，负责数据的加密、转码、解析、格式的定义等。 六、WebView渲染 - 远程资源： WebView加载远程链接url 优点：加载远程url，可以或略下载资源，解压解析资源的过程，相比加载本地资源更加的灵活。 缺点：在弱网或者突然断网的时候，无法正常加载url，降低用户体验。 - 本地资源： WebView加载本地html静态资源 优点：在弱网或者突然断网的时候，可正常加载html资源。 缺点：首次加载的时候较慢，因为需要下载远程的资源，解压，比对版本号，加载，耗时较加载远程url可能慢一些。","categories":[{"name":"iOS","slug":"iOS","permalink":"http://example.com/categories/iOS/"}],"tags":[{"name":"programme","slug":"programme","permalink":"http://example.com/tags/programme/"}]},{"title":"基于GitHub的Hexo博客","slug":"hexofirst","date":"un44fin44","updated":"un55fin55","comments":true,"path":"2022/07/21/hexofirst/","link":"","permalink":"http://example.com/2022/07/21/hexofirst/","excerpt":"","text":"用MacBook搭建Hexo博客于Github上的过程。 环境配置 Hexo官网上本就有对Hexo安装及使用的详细介绍，建议耐心看。这里来讲述自己安装的亲身步骤，或有区别。 1. Node.js 用来生成静态页面。移步Node.js官网，一路安装即可。 2. Git 用来将本地Hexo内容提交到Github上。如果没有Xcode可以参考Hexo官网上的安装方法。 安装Hexo 1$ sudo npm install -g hexo 输入管理员密码（Mac登录密码）即开始安装 (sudo:linux系统管理指令 -g:全局安装) 注意：Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。 初始化 终端cd到一个你选定的目录，执行hexo init命令： 1$ hexo init blog blog是你建立的文件夹名称。cd 到blog文件夹下，执行如下命令，安装npm： 1$ npm install 执行如下命令，开启hexo服务器： 1$ hexo s 此时，浏览器中打开网址http://localhost:4000，能看到如下页面： 关联Github 1. 创建仓库 登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如mrliushuai.github.io即下图中1所示： 本地的blog文件夹下内容为： 1234567_config.yml db.json node_modules package.jsonscaffoldssourcethemes 终端cd到blog文件夹下，vim打开_config.yml，命令如下： 1$ vim _config.yml 当然也可以用自己习惯用的编辑软件进行上一步。 最下面配置 deploy： 1234deploy: type: git repository: https://github.com/mrliushuai/mrliushuai.github.io.git branch: master 你需要将repository后mrliushuai换成你自己的用户名，地址在上图2位置获取。hexo 3.1.1版本后type:值为git。 注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格。 在blog文件夹目录下执行生成静态页面命令： 1$ hexo generate 或者：hexo g 12345678此时若出现如下报错：ERROR Local hexo not found in ~/blogERROR Try runing: &#x27;npm install hexo --save&#x27;则执行命令：$ npm install hexo --save若无报错，自行忽略此步骤。 再执行配置命令： 1$ hexo deploy 或者：hexo d 注意：若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： 1$ npm install hexo-deployer-git --save 再次执行hexo generate和hexo deploy命令。 1$ hexo generate &amp;&amp; hexo deploy 若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即 12Username for &#x27;https://github.com&#x27;:Password for &#x27;https://github.com&#x27;: hexo deploy命令执行成功后，浏览器中打开网址http://mrliushuai.github.io（将gonghonglou换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 2. 避免每次输入Github用户名和密码的办法 添加ssh key到Github 1.1.检查SSH keys是否存在Github 执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。 1$ ls -al ~/.ssh 1.2.生成新的ssh key 执行如下命令生成public/private rsa key pair，注意将[`your_email@example.com](mailto:`your_email@example.com)`换成你自己注册Github的邮箱地址。 1$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。 1.3.将ssh key添加到Github中 Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。 进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key: Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。 3.发布文章 终端cd到blog文件夹下，执行如下命令新建文章： 1$ hexo new &quot;postName&quot; 名为postName.md的文件会建在目录/blog/source/_posts下，postName是文件名，为方便链接不建议掺杂汉字。你当然可以用vim来编辑文章。 文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布： 12$ hexo generate //生成静态页面$ hexo deploy //将文章部署到Github 至此，Macbook上搭建基于Github的Hexo博客完成。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"}],"tags":[{"name":"Technology","slug":"Technology","permalink":"http://example.com/tags/Technology/"}]},{"title":"Hexo 主题 pure","slug":"hexosecond","date":"un44fin44","updated":"un55fin55","comments":true,"path":"2022/07/21/hexosecond/","link":"","permalink":"http://example.com/2022/07/21/hexosecond/","excerpt":"","text":"记录一下我在使用pure主题的过程。 配置说明 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件 安装主题 1$ git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 更新主题 1$ cd themes/pure 1$ git pull 启用pure主题 打开站点配置文件，找到theme字段，将其值更改为 pure。注意：是站点配置文件_config.yml，也就是在初博客文件夹根目录。 1theme: pure 到此，主题安装完成。然后启动Hexo服务验证主题是否正确启用。 1$ hexo s 提示：再每次更爱Hexo的配置是，需要重启服务，才能看到配置效果，如果仅是修改Theme/pure主题的配置刷新预览网页即可。 安装插件 hexo-wordcount 1$ npm install hexo-wordcount --save #阅读相关统计的插件 hexo-generator-json-content 1$ npm install hexo-generator-json-content --save #数据处理 hexo-generator-feed 1$ npm install hexo-generator-feed --save hexo-generator-sitemap 1$ npm install hexo-generator-sitemap --save hexo-generator-baidu-sitemap 1$ npm install hexo-generator-baidu-sitemap --save 主题配置 设置语言 打开站点配置文件(根目录下的_config.yml), 将 language 设置成你所需要的语言。建议明确设置你所需要的语言,可选值对应themes\\pure\\languages目录下语言文件，简体中文配置如下： 1language: zh-CN 主题颜色 定制了五套颜色，默认白，黑:theme-black，蓝:theme-blue，绿:theme-green，紫:theme-purple 123# configconfig: skin: # 主题颜色 theme-black theme-blue theme-green theme-purple 导航菜单 123456789101112131415161718192021# 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Links: links # 友链 About: about # 关于# 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: icon-home-fill archives: icon-archives-fill categories: icon-folder tags: icon-tags repository: icon-project books: icon-book-fill links: icon-friendship about: icon-cup-fill 设置个人信息 123头像在themes\\pure\\source\\images 目录下替换图片即可，捐献的二维码同理。个人信息大部分都在 主题配置文件 中设置 搜索 主题内置三种站内搜索方式：insight、swiftype、baidu 12345# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search 分享 支持weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin 123456# Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,qzone # 移动端显示的分享图标 评论 主题集成了disqus、友言、来必力、gitment、gitalk评论系统，选择其中一种即可 12345678910111213141516# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: livere # 启用哪种评论系统 disqus: # enter disqus shortname here youyan: uid: *** # enter youyan uid livere: uid: *** # enter livere uid gitment: githubID: username repo: username.github.io ClientID: *** ClientSecret: *** lazy: false 文章浏览量统计 主题内置了不蒜子和leancloud来统计文章浏览量，启用其中之一即可，注意leancloud需要到其官网申请APP ID 和APP Key。 比如，启用不蒜子来统计文章浏览量，在主题配置文件中把busuanzi设置为true即可： 123pv: busuanzi: enable: true # 不蒜子统计 如果不需要第三方来统计浏览量，只需将相应设置改为false即可（设置为false后不会加载第三方JS脚本） 项目 复制theme/pure/_source/ 目录下各界面对应的文件夹到blog path/source/ 目录下 新版配置（支持 Github 和 Gitee）： 新版配置将会覆盖旧版的 github 配置！ 12345# Repository Info (This will override &#x27;github&#x27; option)# 项目仓库展示信息（将会覆盖 github 项）repository: platform: github # 托管平台（github | gitee） username: *** # 用户名 旧版配置（仅支持 Github）： 123# Githubgithub: username: *** # github username 友情链接 复制theme/pure/_source/ 目录下links文件夹到blog path/source/ 目录下 在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。 然后在文件内创建一个名为 links.yml 的文件,在其中添加相关数据即可。 单个友情链接的格式为： 1234Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot; 添加多个友情链接，我们只需要根据上面的格式重复填写即可。 . 将 Name 改为友情链接的名字，例如 Cofess。 . http://example.com 为友情链接的地址。 . http://example.com/avatar.png 为友情链接的头像。 . 这是一个描述 为友情链接描述。 文章索引目录 123456title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引 sidebar侧边栏 文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可： 123456title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用 博客优化 hexo-neat auto Minify html、js、css and make it neat 1$ npm install hexo-neat --save 在博客配置文件_config.yml中添加 12345678910111213141516# hexo-neatneat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - &#x27;*.min.css&#x27;neat_js: enable: true mangle: true output: compress: exclude: - &#x27;*.min.js&#x27; hexo-baidu-url-submit （装它报错。。） 1$ npm install hexo-baidu-url-submit --save hexo-translate-title 使用Google翻译，百度翻译和有道翻译将Hexo中的汉字标题转成英文标题 1$ npm install hexo-translate-title --save 在博客配置文件_config.yml中添加 123456translate_title: translate_way: google #google | baidu | youdao youdao_api_key: XXX youdao_keyfrom: XXX is_need_proxy: true #true | false proxy_url: http://localhost:8123 注意：判断是否需要配置google本地代理，因为我在本地是开启时才能访问google翻译的，如果没有被墙，请将_config.yml 下的is_need_proxy: true改为false。如果设置为true,请设置本地代理地址 数学公式 Hexo默认使用&quot;hexo-renderer-marked&quot;引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签 解决方案 解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的方法。 更换Hexo的markdown渲染引擎，hexo-renderer-markdown-it-plus引擎替换默认的渲染引擎hexo-renderer-marked即可。 安装hexo-renderer-markdown-it-plus插件 12$ npm un hexo-renderer-marked --save$ npm i hexo-renderer-markdown-it-plus --save 配置 安装插件后，如果未正常渲染LaTeX数学公式，在博客配置文件_config.yml中添加 12345678910111213141516markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: false 文章启用mathjax 12title: Hello Worldmathjax: true","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"}],"tags":[{"name":"Technology","slug":"Technology","permalink":"http://example.com/tags/Technology/"}]}],"categories":[{"name":"iOS","slug":"iOS","permalink":"http://example.com/categories/iOS/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"}],"tags":[{"name":"programme","slug":"programme","permalink":"http://example.com/tags/programme/"},{"name":"Technology","slug":"Technology","permalink":"http://example.com/tags/Technology/"}]}